<?php

/**
 * @file
 * Main module's file.
 */

/**
 * Implements hook_openy_repeat_results_alter().
 */
function openy_daxko_gxp_syncer_openy_repeat_results_alter(&$results, $request, $date = NULL) {
  if (empty($results)) {
    return;
  }
  /** @var \Drupal\openy_daxko_gxp_syncer\DaxkoGroupexMappingRepository $mappingRepository*/
  $mappingRepository = \Drupal::service('openy_daxko_gxp_syncer.mapping');
  $storage = $mappingRepository->getStorage();
  $query = $storage->getQuery();
  $sessionIds = [];
  foreach ($results as $schedule) {
    if (empty($schedule->productid)) {
      continue;
    }
    $sessionIds[] = $schedule->nid;
  }
  if (empty($sessionIds)) {
    return;
  }
  $query->condition('session', $sessionIds, 'IN');
  $mappingIds = $query->execute();
  $mappings = $storage->loadMultiple($mappingIds);
  $mappingNormalize = [];
  foreach ($mappings as $mapping) {
    /** @var \Drupal\openy_daxko_gxp_syncer\DaxkoGroupexMappingInterface $mapping */
    $mappingNormalize[$mapping->session->target_id] = $mapping->getAvailabilty();
  }
  foreach ($results as &$schedule) {
    if (empty($schedule->productid)) {
      continue;
    }
    if (isset($mappingNormalize[$schedule->nid])) {
      $schedule->spottext = $mappingNormalize[$schedule->nid];
    }
  }
}
